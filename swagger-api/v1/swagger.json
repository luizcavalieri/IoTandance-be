{
  "swagger": "2.0",
  "paths": {
    "/users": {
      "get": {
        "description": "This will show all recorded people.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "people"
        ],
        "summary": "Lists all users.",
        "operationId": "listPeople",
        "responses": {
          "200": {
            "$ref": "#/responses/usersResponse"
          }
        }
      },
      "post": {
        "description": "This will create a record of an user.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "users"
        ],
        "summary": "Create new user.",
        "operationId": "createUsers",
        "responses": {
          "200": {
            "$ref": "#/responses/createUsersResponse"
          },
          "404": {
            "$ref": "#/responses/jsonError"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "description": "This will show the record of an identified user.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "users"
        ],
        "summary": "Lists user from their id.",
        "operationId": "listUsers",
        "responses": {
          "200": {
            "$ref": "#/responses/userResponse"
          },
          "404": {
            "$ref": "#/responses/jsonError"
          }
        }
      }
    }
  },
  "definitions": {
    "user": {
      "description": "name: user_fname\ntype: string\nin: query\nmaxItems: 10\nminItems: 3\nunique: false\nname: user_lname\ntype: string\nin: query\nmaxItems: 10\nminItems: 3\nunique: false\nname: role_id\ntype: int\nin: query\nmaxItems: 10\nminItems: 3\nunique: false\nname: password\ntype: string\nin: query\nmaxItems: 10\nminItems: 3\nunique: false\nname: role_cd\ntype: string\nin: query\nmaxItems: 10\nminItems: 3\nunique: false\nname: active_yn\ntype: boolean\nin: query\nmaxItems: 10\nminItems: 3\nunique: false\n\n\nUser description.",
      "type": "object",
      "title": "Params:",
      "required": [
        "user_id",
        "username",
        "password",
        "active_yn"
      ],
      "properties": {
        "active_yn": {
          "description": "Active of the user",
          "type": "boolean",
          "x-go-name": "Active"
        },
        "last_access_tm": {
          "description": "LastAccess of the user",
          "type": "string",
          "x-go-name": "LastAccess"
        },
        "password": {
          "description": "Password of the user",
          "type": "string",
          "x-go-name": "Password"
        },
        "role_cd": {
          "description": "RoleCd of the user",
          "type": "string",
          "x-go-name": "RoleCd"
        },
        "role_id": {
          "description": "RoleId of the user",
          "type": "integer",
          "format": "int64",
          "x-go-name": "RoleId"
        },
        "user_fname": {
          "description": "FirstName of the user",
          "type": "string",
          "x-go-name": "FirstName"
        },
        "user_id": {
          "description": "ID of the user",
          "type": "string",
          "x-go-name": "ID"
        },
        "user_lname": {
          "description": "LastName of the user",
          "type": "string",
          "x-go-name": "LastName"
        },
        "username": {
          "description": "User name of the user",
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-name": "User",
      "x-go-package": "github.com/luizcavalieri/IoTendance-be/service/users"
    }
  },
  "responses": {
    "createUsersResponse": {
      "description": "PeopleResponse contains the user created in database"
    },
    "jsonError": {
      "description": "JsonError is a generic error in JSON format"
    },
    "userResponse": {
      "description": "UserResponse contains a single person information",
      "schema": {
        "$ref": "#/definitions/user"
      }
    },
    "usersResponse": {
      "description": "PeopleResponse contains all users from database information",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/user"
        }
      }
    }
  }
}